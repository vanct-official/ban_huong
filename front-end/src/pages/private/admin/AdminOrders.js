import React, { useEffect, useState } from "react";
import { Table, Spin, message, Select, Card, Tag } from "antd";
import axios from "axios";
import Sidebar from "../../../components/Sidebar";

const API_URL = process.env.REACT_APP_API_URL;

const AdminOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  // L·∫•y danh s√°ch ƒë∆°n h√†ng
  const fetchOrders = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      const res = await axios.get(`${API_URL}/api/admin/orders`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setOrders(res.data);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i ƒë∆°n h√†ng:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng");
    } finally {
      setLoading(false);
    }
  };

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i
  const handleUpdateStatus = async (id, status) => {
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        `${API_URL}/api/admin/orders/${id}/status`,
        { status },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      message.success("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng");
      fetchOrders();
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", err);
      message.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  // Map m√†u tr·∫°ng th√°i
  const statusColors = {
    pending: "orange",
    paid: "blue",
    shipped: "purple",
    completed: "green",
    cancelled: "red",
  };

  // C·ªôt b·∫£ng
  const columns = [
    { title: "M√£ ƒë∆°n", dataIndex: "id", key: "id" },
    {
      title: "Kh√°ch h√†ng",
      dataIndex: ["user", "email"],
      key: "user",
      render: (email) => email || <Tag color="default">·∫®n danh</Tag>,
    },
    {
      title: "Ng√†y ƒë·∫∑t",
      dataIndex: "orderDate",
      render: (date) => new Date(date).toLocaleString("vi-VN"),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      render: (status, record) => (
        <Select
          value={status}
          style={{ width: 140 }}
          onChange={(val) => handleUpdateStatus(record.id, val)}
        >
          <Select.Option value="pending">ƒêang ch·ªù</Select.Option>
          <Select.Option value="paid">ƒê√£ thanh to√°n</Select.Option>
          <Select.Option value="shipped">ƒêang giao</Select.Option>
          <Select.Option value="completed">Ho√†n th√†nh</Select.Option>
          <Select.Option value="cancelled">H·ªßy</Select.Option>
        </Select>
      ),
    },
    {
      title: "T·ªïng ti·ªÅn",
      dataIndex: "totalAmount",
      render: (val) => (
        <span style={{ fontWeight: 600, color: "#ea580c" }}>
          {Number(val).toLocaleString("vi-VN")} ƒë
        </span>
      ),
    },
    {
      title: "Chi ti·∫øt",
      dataIndex: "items",
      render: (items) =>
        items && items.length > 0 ? (
          <ul style={{ margin: 0, paddingLeft: 18 }}>
            {items.map((i) => (
              <li key={i.id}>
                {i.product?.productName} √ó {i.quantity}
              </li>
            ))}
          </ul>
        ) : (
          <Tag color="red">Ch∆∞a c√≥ s·∫£n ph·∫©m</Tag>
        ),
    },
  ];

  return (
    <div style={{ display: "flex" }}>
      <Sidebar />
      <div style={{ flex: 1, padding: 24, marginLeft: 250 }}>
        <Card
          title="üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng"
          bordered
          style={{
            borderRadius: 12,
            boxShadow: "0 2px 12px rgba(0,0,0,0.05)",
          }}
        >
          {loading ? (
            <div style={{ textAlign: "center", padding: 50 }}>
              <Spin size="large" tip="ƒêang t·∫£i ƒë∆°n h√†ng..." />
            </div>
          ) : (
            <Table
              rowKey="id"
              columns={columns}
              dataSource={orders}
              pagination={{ pageSize: 8 }}
              bordered
            />
          )}
        </Card>
      </div>
    </div>
  );
};

export default AdminOrders;
